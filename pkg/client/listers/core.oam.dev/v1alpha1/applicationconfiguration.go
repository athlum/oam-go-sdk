/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/oam-dev/oam-go-sdk/apis/core.oam.dev/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationConfigurationLister helps list ApplicationConfigurations.
type ApplicationConfigurationLister interface {
	// List lists all ApplicationConfigurations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationConfiguration, err error)
	// ApplicationConfigurations returns an object that can list and get ApplicationConfigurations.
	ApplicationConfigurations(namespace string) ApplicationConfigurationNamespaceLister
	ApplicationConfigurationListerExpansion
}

// applicationConfigurationLister implements the ApplicationConfigurationLister interface.
type applicationConfigurationLister struct {
	indexer cache.Indexer
}

// NewApplicationConfigurationLister returns a new ApplicationConfigurationLister.
func NewApplicationConfigurationLister(indexer cache.Indexer) ApplicationConfigurationLister {
	return &applicationConfigurationLister{indexer: indexer}
}

// List lists all ApplicationConfigurations in the indexer.
func (s *applicationConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationConfiguration))
	})
	return ret, err
}

// ApplicationConfigurations returns an object that can list and get ApplicationConfigurations.
func (s *applicationConfigurationLister) ApplicationConfigurations(namespace string) ApplicationConfigurationNamespaceLister {
	return applicationConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationConfigurationNamespaceLister helps list and get ApplicationConfigurations.
type ApplicationConfigurationNamespaceLister interface {
	// List lists all ApplicationConfigurations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationConfiguration, err error)
	// Get retrieves the ApplicationConfiguration from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ApplicationConfiguration, error)
	ApplicationConfigurationNamespaceListerExpansion
}

// applicationConfigurationNamespaceLister implements the ApplicationConfigurationNamespaceLister
// interface.
type applicationConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationConfigurations in the indexer for a given namespace.
func (s applicationConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationConfiguration))
	})
	return ret, err
}

// Get retrieves the ApplicationConfiguration from the indexer for a given namespace and name.
func (s applicationConfigurationNamespaceLister) Get(name string) (*v1alpha1.ApplicationConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("applicationconfiguration"), name)
	}
	return obj.(*v1alpha1.ApplicationConfiguration), nil
}
