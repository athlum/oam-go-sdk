/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/oam-dev/oam-go-sdk/apis/core.oam.dev/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComponentSchematicLister helps list ComponentSchematics.
type ComponentSchematicLister interface {
	// List lists all ComponentSchematics in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ComponentSchematic, err error)
	// ComponentSchematics returns an object that can list and get ComponentSchematics.
	ComponentSchematics(namespace string) ComponentSchematicNamespaceLister
	ComponentSchematicListerExpansion
}

// componentSchematicLister implements the ComponentSchematicLister interface.
type componentSchematicLister struct {
	indexer cache.Indexer
}

// NewComponentSchematicLister returns a new ComponentSchematicLister.
func NewComponentSchematicLister(indexer cache.Indexer) ComponentSchematicLister {
	return &componentSchematicLister{indexer: indexer}
}

// List lists all ComponentSchematics in the indexer.
func (s *componentSchematicLister) List(selector labels.Selector) (ret []*v1alpha1.ComponentSchematic, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComponentSchematic))
	})
	return ret, err
}

// ComponentSchematics returns an object that can list and get ComponentSchematics.
func (s *componentSchematicLister) ComponentSchematics(namespace string) ComponentSchematicNamespaceLister {
	return componentSchematicNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComponentSchematicNamespaceLister helps list and get ComponentSchematics.
type ComponentSchematicNamespaceLister interface {
	// List lists all ComponentSchematics in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ComponentSchematic, err error)
	// Get retrieves the ComponentSchematic from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ComponentSchematic, error)
	ComponentSchematicNamespaceListerExpansion
}

// componentSchematicNamespaceLister implements the ComponentSchematicNamespaceLister
// interface.
type componentSchematicNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComponentSchematics in the indexer for a given namespace.
func (s componentSchematicNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ComponentSchematic, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ComponentSchematic))
	})
	return ret, err
}

// Get retrieves the ComponentSchematic from the indexer for a given namespace and name.
func (s componentSchematicNamespaceLister) Get(name string) (*v1alpha1.ComponentSchematic, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("componentschematic"), name)
	}
	return obj.(*v1alpha1.ComponentSchematic), nil
}
